global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

# ---MARCO
snippet brk "raya" iA

---

$0
endsnippet

snippet cra "con resp" 
con respecto a $0
endsnippet

priority 100
context "math()"
snippet bk "ket" wA
\braket{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet kt "ket" wA
\ket{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet br "bra" wA
\bra{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

snippet todo "todo" ib
TODO **$1** 
$0
endsnippet

snippet _ "it" i
_${VISUAL}_$0
endsnippet

snippet * "bold" i
*${VISUAL}*$0
endsnippet

snippet lin "link" i
[$1]($2) $0
endsnippet

snippet >> ">>" iA
\gg $0
endsnippet

snippet << "<<" iA
\ll $0
endsnippet

snippet img "imagen" i
![$1]($2){ width=250px }
$0
endsnippet

context "math()"
snippet tex "text" iA
\text{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet dag "dagger" iA
^\dagger$0
endsnippet

# -------- MARCO

priority 100
snippet ... "ldots" i
\ldots
endsnippet

snippet ref "referencia" iw
[^$1]

[^$1]: $0

endsnippet

context "math()"
snippet par "partial diff" iw
\\partial _{$1} $0
endsnippet

context "math()"
snippet qq "qquad" iwA
\\qquad
endsnippet

context "math()"
snippet vb "bold var" iA
\\mathbf{$1}$0
endsnippet

context "math()"
snippet vh "sombrero sobre var" iA
\\hat{$1}$0
endsnippet

context "math()"
snippet vc "flecha sobre var" iA
\\vec{$1} $0
endsnippet

context "math()"
snippet vd "punto sobre var" iA
\\dot{$1} $0
endsnippet

snippet mk "inline-Math" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet


snippet dm "display-Math" wA
$$
    ${1:${VISUAL}}
$$ $0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet


context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol-frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet


priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet


priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t, a, b, c = symbols('x y z t a b c')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet


snippet == "equals" iA
&= $1 \\\\
endsnippet


context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet


context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet


snippet pmat "pmat" iA
\begin{pmatrix} 
    $1
\end{pmatrix}
$0
endsnippet


snippet bmat "bmat" iA
\begin{bmatrix} 
    $1
\end{bmatrix}
$0
endsnippet


context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet


context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

priority 100
context "math()"
snippet -. "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet


context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet


context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet



snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet



snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the (...) power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "(-)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "(-)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "|-|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "{-}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "{-}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "[-]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle-rightangle" iA
\left< ${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet > "grthan" i
\right>$0
endsnippet

context "math()"
snippet < "lessthan" i
\left<$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet
